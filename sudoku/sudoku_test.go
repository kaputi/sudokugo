package sudoku

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSudoku(t *testing.T) {
	board := Board{
		{5, 3, 0, 0, 7, 0, 0, 0, 0},
		{6, 0, 0, 1, 9, 5, 0, 0, 0},
		{0, 9, 8, 0, 0, 0, 0, 6, 0},
		// -------------------
		{8, 0, 0, 0, 6, 0, 0, 0, 3},
		{4, 0, 0, 8, 0, 3, 0, 0, 1},
		{7, 0, 0, 0, 2, 0, 0, 0, 6},
		// -------------------
		{0, 6, 0, 0, 0, 0, 2, 8, 0},
		{0, 0, 0, 4, 1, 9, 0, 0, 5},
		{0, 0, 0, 0, 8, 0, 0, 7, 9},
	}

	assert.Equal(t, true, Validate(board))

	expected := Board{
		{5, 3, 4, 6, 7, 8, 9, 1, 2},
		{6, 7, 2, 1, 9, 5, 3, 4, 8},
		{1, 9, 8, 3, 4, 2, 5, 6, 7},
		// -------------------
		{8, 5, 9, 7, 6, 1, 4, 2, 3},
		{4, 2, 6, 8, 5, 3, 7, 9, 1},
		{7, 1, 3, 9, 2, 4, 8, 5, 6},
		// -------------------
		{9, 6, 1, 5, 3, 7, 2, 8, 4},
		{2, 8, 7, 4, 1, 9, 6, 3, 5},
		{3, 4, 5, 2, 8, 6, 1, 7, 9},
	}

	solved, err := Solve(board)

	assert.Equal(t, expected, solved)
	assert.Nil(t, err)

	worstCase := Board{
		{9, 8, 7, 6, 5, 4, 3, 2, 1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		// -------------------
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		// -------------------
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0},
	}

	worstCaseExpects := Board{
		{9, 8, 7, 6, 5, 4, 3, 2, 1},
		{1, 2, 3, 7, 8, 9, 4, 5, 6},
		{4, 5, 6, 1, 2, 3, 7, 8, 9},
		// -------------------
		{2, 1, 4, 3, 6, 5, 8, 9, 7},
		{3, 6, 5, 8, 9, 7, 1, 4, 2},
		{7, 9, 8, 2, 4, 1, 5, 6, 3},
		// -------------------
		{5, 3, 2, 4, 1, 6, 9, 7, 8},
		{6, 4, 1, 9, 7, 8, 2, 3, 5},
		{8, 7, 9, 5, 3, 2, 6, 1, 4},
	}

	solvedWorstCase, err := Solve(worstCase)

	assert.Equal(t, solvedWorstCase, worstCaseExpects)
	assert.Nil(t, err)

	unsolvable := Board{
		{2, 0, 0, 9, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 6, 0},
		{0, 0, 0, 0, 0, 1, 0, 0, 0},
		// -------------------
		{5, 0, 2, 6, 0, 0, 4, 0, 7},
		{0, 0, 0, 0, 0, 4, 1, 0, 0},
		{0, 0, 0, 0, 9, 8, 0, 2, 3},
		// -------------------
		{0, 0, 0, 0, 0, 3, 0, 8, 0},
		{0, 0, 5, 0, 1, 0, 0, 0, 0},
		{0, 0, 7, 0, 0, 0, 0, 0, 0},
	}

	assert.Equal(t, false, Validate(unsolvable))

	_, err = Solve(unsolvable)
	assert.EqualError(t, err, "unsolvable")

	newboard := CreatePuzzle(4)

  PrintBoard(newboard)

	assert.Equal(t, 1, CountSolutions(newboard))

}
